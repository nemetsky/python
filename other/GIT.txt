Git - аспределенный подход к созданию/управлению проектом

https://git-scm.com/book/ru/v2/ - ДОКУМЕНТАЦИЯ

-- Установка --
apt-get install git
yum install git
git help					!гит использует lees для просмотра, / -поиск, n - далее, n! - назад, q -выход

!git-bash-promt - оболочка для гит, можно скачать и поставить для удобства

-- Основные настройки --
git config --global user.name "Имя Фамилия"
git cinfig --global user.email "Email"
git config --global colour.ui true

-- Создание проекта --
mkdir my-project
cd my-project
git init

tree -a						!посмотреть дерево каталога гит
cat .git/config 			!посмотреть локальные базовые настройки гит
cat ~/gitconfig 			!посмотреть глобальные базовые настройки гит (используются для всех репозиториев пользователя)
cat /etc/gitconfig			!посмотреть системные настройки гит

git config -h				!посмотреть все возможные базовые настройки
git config --list			!посмотреть все параметры
git config --list --global	!посмотреть глобальные параметры	

git config --unset user.name					!удалить докальный параметр
git config --global core.editor 'PATH EDIDOR' 	!текстовый редактор по умолчанию
			
!Можно делать alias на команды или группу команд (Урок 02.01 Git - Основы Конфигурация)


-- Удаление репозитория --
rm -rf .git 				
rm -rf .git*				!или в случае их наличия .gitignore и .gitmodules 
ls -lah						!проверка удаления

-- Основные команды --
git status
git log
							!untracked or modified - создали или изменили файл 
git add file1 file2			!staged - подготовили файл
git add .
git add *.txt				
git add "*.txt"				!добавить все файлы в проекте с расширением .txt
git add folder1/			!добавить все файлы из папки

git commit								!commited -зафиксировали файл
git commit -m "Комментарий/cообщение"
git commit -a -m "Сообщение"			!аргумент -a тоже самое что git add . , важное отличие - не добавляет новые untracked файлы, а только modified файлы.
git commit --amend -m "Новое сообщение" !добавить свежие изменения в последний коммит, новый коммит не создается	

git diff					!разница между неотслеживаниемым состоянием репозитория и последним снимком репозитория
git diff --staged			!разница между отслеживаниемым и последним снимком
git diff COMMIT_ID			!разница между текущим состоянием и указанным снимком


! указатель HEAD указывает на последний (текущий) коммит, его можно смещать

git reset HEAD^				!откат к  предыдущему снимку
git reset HEAD~2			!отказ на 2 снимка назад
git reset COMMIT_ID
git reset --soft			!возвращает проект к указанному коммиту, переводит все коммиты после указанного в отслеживаемую зону
git reset --mixed			!(по умолчанию) возвращает проект к указанному коммиту, переводит все коммиты после указанного в unstaged 
git reset --hard			!возвращает проект к указанному коммиту, удалеят все коммиты до указанного безвозвратно, !!!При этом неотслеживаемые (untracked) файлы не удалит!!!
git reset --hard HEAD^^		!Пример
git reset					!без аргументов - вернуть проект к последнему коммиту

!Нельзя удалять коммиты после того как вы обуликовали их в публичном репозитории 

git checkout				!исплользуется для перемещения между коммитами, версиями файлов и ветками
							!В отлииче от Reset коммиты не удаляются
							!Указатель HEAD находится в состояние DETACHED, не можем делать изменения и коммиты, будут автоматически удалены
git checkout COMMIT_ID 		!вернуться к коммиту и например посмотреть состояние репозитория в прошлом
git checkout HEAD^^
git checkout master			!Вернуться обратно к актуальному коммиту

git checkout COMMIT_ID -- file1		!Перемещение между версиями файлов (можно изменить версии файлов!!!)
git checkout -- file1				!Возвращает file1 к версии, которая была у него в последнем коммите, Только для untracked и modified изменений
									! -- желательно указывать две черты, так как они говорят что после них обычный текст, а не команда или паратметр
!Если надо удалить отслеживаемые изменения (после gid add), то делаем
git reset					!переводим отслеживаемые изменения в неоствлеживаемые
git checkout -- . 			!удаляем все неотслеживаемые изменения

gir clean					!Позволяет удалить untracked файлы, (так как команда Reset их не умеет удалять)
git clean -n 				!Посмотерть какие файлы будут удалены
git clean -f				!Удалить untracked файлы

-- Удаленные репозитории --

git remote -v				!просмотр существующих удаленных репозиториев
git remote add ИМЯ-РЕПОЗИТОРИЯ АДРЕС-РЕПОЗИТОРИЯ
git remote add origin https://github.com/NeilAlishev/Some-Name.git		!origin - название ссылки на репозиторий, так принято называть
git remote remove origin

git push origin master		!отправлем на удаленный репозиторий ветку master, неодходимо вводить пароль
git pull origin master		!получение обновлений с удаленного репозитория

-- Настройка SSH --

/home/USER/.ssh
 id_rsa						!приватный ключ клиента  
 id_rsa.pub					!публичный ключ клиента
 authorized_keys			!в этот файл на сервере необходимо добавить публичный ключ клиента для аутентификацию по ключу
 known_hosts				!в этот файл клиент заносит публичный ключ сервера

/etc/ssh					!здесь находятся ключи сервера и настройки ssh_config сервера (ключ вида ssh_host_rsa_key.pub)

ssh-keygen 								!генерация ключей
ssh -v nemetskiy@192.168.0.18 			!включить отладку ssh
scp id_rsa.pub nemetskiy@192.168.0.18	!скопировать ключ на сервер (или в любую папку scp id_rsa.pub nemetskiy@192.168.0.18:/tmp)
cat id_rsa.pub >> authorized_keys		!добавить ключ в файл
service sshd restart					!перезапустить сервис ssh, если перед этим серверные ключи удалить то они внось создадутся
ssh-keygen -l -f ssh_host_rsa_key.pub	!узнать fingerprint (отпечаток) серверного ключа

ssh-agent 								!помощник ssh (подробно в видео по  ssh время 00:57)
rsync									!тоже использует ssh, в отлииче от scp синхронизирует файлы, если на стороне получателя они есть то пропускает
rsync -av /home/USER/doc nemetskiy@192.168.0.18:/tmp 	! -a копировать архивным образом, -v verbose показывать что копируешь


- Клонирование репозитория --

git clone 				!вместо git init, git remote add, git pull

git clone ssh://nemetskiy@192.168.0.18/home/nemetskiy/MYGIT
git clone nemetskiy@192.168.0.18:/home/nemetskiy/MYGIT

-- Работа с ветками --

git branch						!посмотреть на какой ветке сейчас находимся (Где накходится указатель HEAD))
git branch some-feature1		!создали ветку some-feature1 от текущего коммита (содержимое будет все как на ветке master)
git branch -d some-feature1		!удалить ветку
git checkout some-feature1		!переключиться на ветку для работы в ней
git merge some-feature1			!слить ветку в ветку master (сначала переходим в ветку master командой git checkout master и потом сливаем, коммиты из ветке перетекут в master)

		!слияние может быть:
		  fast-forward		- как будто отдельной ветки не было, не создается отдельный коммит слияния (никаких коммитов в ветке master не было пока существовала другая ветка) 
		  recursive			- в ветке master были новые коммиты пока работали в отдельной ветке, меняли разные файлы, появиться отдельный коммит merge
		  merge-конфликт	- если один и тот же файл изменили в разных ветках, конфликт разрешается вручную редактированием конфликтного файла
							  (Как решить конфлик слияния в ВИДЕО "Конфликты слияния")

-- Работа с удаленными ветками --	
					  
git branch -r					!посмотреть удаленные ветки в удаленных репозиториях (например origin/master, где origin - имя удаленного репозитория)
		
		!локальные ветки изменяются нами, удаленные другими людьми
		!удаленная ветка создается после того как мы ее push-им на удал. репозиторий
		!например git pull origin master скачивает удал.ветку с удал. репозитория в ветку origin/master и сливает с локальной веткой master
		!подробно в уроке "Подробно о команде git pull. Команда git fetch"

git fetch						!скачивает удал. ветки с репозитория но не делает слияние удал.ветки с локальной веткой

git pull  =   1. git fetch					!git pull можно представить 2-мя командами, т.е выполняет эти 2 команды
			  2. git merge origin/master
			  
		!Если на удаленный репозиторий кто-то запушил, то мы должны прежде чем тоже запушить сначала запулить (коммиты	других пользователей)
		  git pull origin master			(создаться дополнительно коммит сляния)
	      git push origin master	
		  
git push origin some-feature1		!Можно также свою ветку можно пушить на удаленный репозиторий (ВИДЕО "Удаленные ветки")
										1. чтобы другие мошгли над ней работать
										2. чтобы сделать резервную копию
git pull origin some-feature1		! другой может эту ветку себе спулить удаленную ветку (git branch -r  чтобы проверить)
git pull							! без указания спулит все ветки
git checkout some-feature1			! создаст локальную ветку из удаленной ветки (git branch чтобы проверить)

git remote show	origin					! посмотреть удаленные ветки и локальные и их состояния
git push --delete origin some-feature1	! удалить ветку в удаленном репозитории origin
git branch -D some-feature1				! -D позволит удалить локальную ветку если даже мы ее не слили в master

---------------------------------------------

Если сделали git init не в том каталоге, то можно удалить проект в этом каталоге:
rm -rf .git

В Windows удаляем просто скрытую папку .git

.gitignore  - файл в котором перечисляем файлы, за которыми не надо следить, например служебные какие-то файлы

====================================
# Подключение удаленного репозитория:

git clone https://github.com/nemetsky/python.git
# или
git init
git remote add origin https://github.com/nemetsky/python.git
git branch -M main

git remote 0v

# Ошибка

c:\git\git_1 (main)
git pull origin main
fatal: unable to access 'https://github.com/nemetsky/python.git/': schannel: next InitializeSecurityContext failed: CRYPT_E_NO_REVOCATION_CHECK (0x80092012) - ╘єэъЎш  юЄч√тр эх ёьюуыр яЁюшчтхёЄш яЁютхЁъє юЄч√тр фы  ёхЁЄшЇшърЄр.
 
# Исправление помогло

# https://stackoverflow.com/questions/45556189/git-the-revocation-function-was-unable-to-check-revocation-for-the-certificate

git config --global http.sslBackend openssl
# git config --global http.sslBackend schannel
git config --global http.schannelCheckRevoke false
# git config --global http.schannelCheckRevoke true

git config --list



